---
# Source: vpa/templates/recommender-service-account.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: vpa-recommender
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: recommender
---
# Source: vpa/templates/updater-service-account.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: vpa-updater
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: updater
---
# Source: vpa/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-metrics-reader
rules:
  - apiGroups:
      - "metrics.k8s.io"
    resources:
      - pods
    verbs:
      - get
      - list
---
# Source: vpa/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-actor
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - limitranges
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
      - create
  - apiGroups:
      - "poc.autoscaling.k8s.io"
    resources:
      - verticalpodautoscalers
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - "autoscaling.k8s.io"
    resources:
      - verticalpodautoscalers
    verbs:
      - get
      - list
      - watch
      - patch
---
# Source: vpa/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-checkpoint-actor
rules:
  - apiGroups:
      - "poc.autoscaling.k8s.io"
    resources:
      - verticalpodautoscalercheckpoints
    verbs:
      - get
      - list
      - watch
      - create
      - patch
      - delete
  - apiGroups:
      - "autoscaling.k8s.io"
    resources:
      - verticalpodautoscalercheckpoints
    verbs:
      - get
      - list
      - watch
      - create
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
---
# Source: vpa/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-evictioner
rules:
  - apiGroups:
      - "apps"
      - "extensions"
    resources:
      - replicasets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - pods/eviction
    verbs:
      - create
---
# Source: vpa/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-target-reader
rules:
  - apiGroups:
      - "*"
    resources:
      - "*/scale"
    verbs:
      - get
      - watch
  - apiGroups:
      - ""
    resources:
      - replicationcontrollers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
---
# Source: vpa/templates/clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-status-reader
rules:
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
---
# Source: vpa/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-metrics-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-metrics-reader
subjects:
  - kind: ServiceAccount
    name: vpa-recommender
    namespace: argocd
---
# Source: vpa/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-checkpoint-actor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-checkpoint-actor
subjects:
  - kind: ServiceAccount
    name: vpa-recommender
    namespace: argocd
---
# Source: vpa/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-evictionter-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-evictioner
subjects:
  - kind: ServiceAccount
    name: vpa-updater
    namespace: argocd
---
# Source: vpa/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-status-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-status-reader
subjects:
  - kind: ServiceAccount
    name: vpa-updater
    namespace: argocd
---
# Source: vpa/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-actor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-actor
subjects:
  - kind: ServiceAccount
    name: vpa-recommender
    namespace: argocd
  - kind: ServiceAccount
    name: vpa-updater
    namespace: argocd
---
# Source: vpa/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-target-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-target-reader
subjects:
  - kind: ServiceAccount
    name: vpa-recommender
    namespace: argocd
  - kind: ServiceAccount
    name: vpa-updater
    namespace: argocd
---
# Source: vpa/templates/recommender-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpa-recommender
  labels:
    app.kubernetes.io/component: recommender
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: recommender
      app.kubernetes.io/name: vpa
      app.kubernetes.io/instance: vpa
  template:
    metadata:
      labels:
        app.kubernetes.io/component: recommender
        app.kubernetes.io/name: vpa
        app.kubernetes.io/instance: vpa
    spec:
      serviceAccountName: vpa-recommender
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: vpa
          securityContext: {}
          image: "k8s.gcr.io/autoscaling/vpa-recommender:0.11.0"
          imagePullPolicy: Always
          args:
            - --pod-recommendation-min-cpu-millicores=15
            - --pod-recommendation-min-memory-mb=100
            - --v=4
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health-check
              port: metrics
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 120
            httpGet:
              path: /health-check
              port: metrics
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - name: metrics
              containerPort: 8942
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 1000Mi
            requests:
              cpu: 50m
              memory: 500Mi
---
# Source: vpa/templates/updater-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vpa-updater
  labels:
    app.kubernetes.io/component: updater
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: updater
      app.kubernetes.io/name: vpa
      app.kubernetes.io/instance: vpa
  template:
    metadata:
      labels:
        app.kubernetes.io/component: updater
        app.kubernetes.io/name: vpa
        app.kubernetes.io/instance: vpa
    spec:
      serviceAccountName: vpa-updater
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: vpa
          securityContext: {}
          image: "k8s.gcr.io/autoscaling/vpa-updater:0.11.0"
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health-check
              port: metrics
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 120
            httpGet:
              path: /health-check
              port: metrics
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - name: metrics
              containerPort: 8943
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 1000Mi
            requests:
              cpu: 50m
              memory: 500Mi
---
# Source: vpa/templates/tests/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    "helm.sh/hook": "test"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
    "helm.sh/hook-weight": "10"
  name: vpa-test
---
# Source: vpa/templates/tests/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vpa-test
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "test"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
    "helm.sh/hook-weight": "20"
rules:
  - apiGroups:
      - "metrics.k8s.io"
    resources:
      - "nodes"
    verbs:
      - list
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "autoscaling.k8s.io"
    resources:
      - verticalpodautoscalers
    verbs:
      - get
      - list
      - watch
      - create
      - delete
  - apiGroups:
      - "autoscaling.k8s.io"
    resources:
      - verticalpodautoscalercheckpoints
    verbs:
      - get
      - list
      - watch
---
# Source: vpa/templates/tests/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vpa-test
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": "test"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation,hook-failed"
    "helm.sh/hook-weight": "30"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vpa-test
subjects:
  - kind: ServiceAccount
    name: vpa-test
    namespace: argocd
---
# Source: vpa/templates/tests/crd-available.yaml
apiVersion: v1
kind: Pod
metadata:
  name: vpa-checkpoint-crd-available
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    "helm.sh/hook-weight": "50"
spec:
  serviceAccountName: vpa-test
  containers:
    - name: test
      image: quay.io/reactiveops/ci-images:v11-alpine
      command: ["kubectl"]
      args:
        - get
        - crd
        - verticalpodautoscalercheckpoints.autoscaling.k8s.io
  restartPolicy: Never
---
# Source: vpa/templates/tests/crd-available.yaml
apiVersion: v1
kind: Pod
metadata:
  name: vpa-crd-available
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    "helm.sh/hook-weight": "50"
spec:
  serviceAccountName: vpa-test
  containers:
    - name: test
      image: quay.io/reactiveops/ci-images:v11-alpine
      command: ["kubectl"]
      args:
        - get
        - crd
        - verticalpodautoscalers.autoscaling.k8s.io
  restartPolicy: Never
---
# Source: vpa/templates/tests/create-vpa.yaml
apiVersion: v1
kind: Pod
metadata:
  name: vpa-test-create-vpa
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    "helm.sh/hook-weight": "100"
spec:
  serviceAccountName: vpa-test
  containers:
    - name: test
      image: quay.io/reactiveops/ci-images:v11-alpine
      command: ["bash"]
      args:
        - -c
        - |
          #!/bin/bash

          set -e
          set -x
          cat <<EOF | kubectl -n argocd apply -f -
          apiVersion: autoscaling.k8s.io/v1
          kind: VerticalPodAutoscaler
          metadata:
            name: test-vpa
          spec:
            targetRef:
              apiVersion: "apps/v1"
              kind:       Deployment
              name:       my-app
            updatePolicy:
              updateMode: "Off"
          EOF

          kubectl -n argocd describe vpa test-vpa
          kubectl -n argocd delete vpa test-vpa
  restartPolicy: Never
---
# Source: vpa/templates/tests/metrics.yaml
apiVersion: v1
kind: Pod
metadata:
  name: vpa-metrics-api-available
  labels:
    helm.sh/chart: vpa-1.6.0
    app.kubernetes.io/name: vpa
    app.kubernetes.io/instance: vpa
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    "helm.sh/hook-weight": "70"
spec:
  serviceAccountName: vpa-test
  containers:
    - name: test
      image: quay.io/reactiveops/ci-images:v11-alpine
      command: ["kubectl"]
      args:
        - get
        - --raw
        - "/apis/metrics.k8s.io/v1beta1/nodes"
  restartPolicy: Never
